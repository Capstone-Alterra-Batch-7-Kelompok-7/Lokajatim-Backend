name: ci/cd pipeline

on:
  push:
    branches:
        - develop

jobs:
    test:
        runs-on: ubuntu-latest

        steps:
            - name: Checkout code
              uses: actions/checkout@v2

            - name: Setup Go
              uses: actions/setup-go@v3
              with:
                go-version: 1.21
        
            - name: Run tests
              run: |
                go test -v ./...

    build-and-push-docker:
        runs-on: ubuntu-latest
        needs: test
        steps:
            - name: Checkout code
              uses: actions/checkout@v2

            - name: Create .env file
              run: |
                echo "${{ secrets.ENV }}" > .env

            - name: Build Docker image
              run: docker build -t rifqynrwndy/capstone-alterra:1.0.0 .
            
            - name: Login to Docker Hub
              uses: docker/login-action@v1
              with:
                username: ${{ secrets.DOCKER_USERNAME }}
                password: ${{ secrets.DOCKER_SECRET_KEY }}

            - name: Push Docker image
              run: docker push rifqynrwndy/capstone-alterra:1.0.0
    
    swagger-automation:
        runs-on: ubuntu-latest
        needs: build-and-push-docker
        steps:
            - name: Fetch Postman Collection
              run: |
                curl -o postman-collection.json "https://api.postman.com/collections/30501877-73037f6b-5615-461e-b967-26fdcbc863eb?access_key=${{ secrets.POSTMAN_ACCESS_KEY }}"

            - name: Install Node.js
              uses: actions/setup-node@v3
              with:
                node-version: '16'

            - name: Install Postman-to-Swagger Converter
              run: npm install -g postman-to-openapi

            - name: Convert Postman to Swagger
              run: postman-to-openapi postman-collection.json -o swagger.yaml

            - name: Publish Swagger to Docker
              run: |
                mkdir -p swagger-ui
                echo 'swagger-ui' >> .dockerignore
                curl -o swagger-ui/swagger-ui.tar.gz https://github.com/swagger-api/swagger-ui/archive/refs/heads/main.tar.gz
                tar -xzvf swagger-ui/swagger-ui.tar.gz -C swagger-ui --strip-components=1
                cp swagger.yaml swagger-ui/
                echo "FROM nginx:latest
                      COPY ./swagger-ui /usr/share/nginx/html
                " > Dockerfile
                docker build -t rifqynrwndy/swagger-ui:latest .
                docker push rifqynrwndy/swagger-ui:latest

    deploy:
        needs: swagger-automation
        runs-on: ubuntu-latest
        env:
            IMAGE_URI: rifqynrwndy/capstone-alterra:1.0.0
            SWAGGER_IMAGE_URI: rifqynrwndy/swagger-ui:latest
            EC2_HOST: ${{ secrets.EC2_HOST }}
            EC2_USER: ${{ secrets.EC2_USER }}

        steps:
        - name: Check out the code
          uses: actions/checkout@v2

        - name: Create PEM file from secret
          run: |
                echo "${{ secrets.EC2_PEM_KEY }}" > ec2-key.pem
                chmod 600 ec2-key.pem

        - name: Deploy to EC2
          run: |
            ssh -i ec2-key.pem -o StrictHostKeyChecking=no $EC2_USER@$EC2_HOST << EOF
            # Stop the current containers if running
            sudo docker ps -q --filter "name=my-container" | grep -q . && sudo docker stop my-container || true
            sudo docker rm my-container || true

            sudo docker ps -q --filter "name=swagger-ui" | grep -q . && sudo docker stop swagger-ui || true
            sudo docker rm swagger-ui || true

            # Pull the latest images
            sudo docker pull $IMAGE_URI
            sudo docker pull $SWAGGER_IMAGE_URI

            # Run the new containers
            sudo docker run -d --name my-container -p 8000:8000 $IMAGE_URI
            sudo docker run -d --name swagger-ui -p 8080:80 $SWAGGER_IMAGE_URI
            EOF

        - name: Clean up PEM file
          run: rm -f ec2-key.pem